### A Pluto.jl notebook ###
# v0.19.16

using Markdown
using InteractiveUtils

# ╔═╡ 0285a330-7374-11ed-3454-7188768772bc
using BenchmarkTools

# ╔═╡ 0d69fbf7-45f1-4358-9ba2-8be44e37e25e
using SLEEFPirates

# ╔═╡ c8308e19-bbcd-4b7b-8e07-47af06fc07c8
using MCAnalyzer

# ╔═╡ 4025d9a0-3d9a-4135-977f-67d16e660f65
md"""
# Vectorisation on A64FX in Julia vs other compilers

Eva Siegmann developed some [simple benchmarks](https://www.stonybrook.edu/commcms/ookami/support/faq/Vectorization_Example.php) for Ookami to test vectorisation capabilities of different compilers on A64FX.

We can easily implement the same functions in Julia to see how it fares on this CPU.
"""

# ╔═╡ 3fbd2107-7359-47cf-ada0-2fd59691300e
md"## Preparation"

# ╔═╡ 33aea1f7-f12d-4d78-bdfa-17ef2e11bd82
md"""
[`BenchmarkTools.jl`](https://github.com/JuliaCI/BenchmarkTools.jl) is a popular Julia package for benchmarking functions.
It can also be used to benchmark functions written in other languages if they are available in shared libraries that Julia can `@ccall` into.
"""

# ╔═╡ 936f317c-e7a5-46b0-96f0-e5f687cde0ab
md"""
By using [metaprogramming](https://docs.julialang.org/en/v1/manual/metaprogramming) we can automatically generate all the functions to call the routines in the shared libraries we have compiled.

!!! note
    Metaprogramming is a powerful tool to automatically generate code that would be otherwise tedious to type. However the following snippet seems a bit unreadable, and it probably is, so [use metaprogramming with care](https://www.youtube.com/watch?v=mSgXWpvQEHE)!
"""

# ╔═╡ 9fa359b2-2b31-431b-93e3-77f84b4a9098
for sym in ("simple", "recip", "sqrt", "exp", "sin", "pow"), compiler in ("gcc", "llvm", "fujitsu"), mode in ("", "fast")
    compiler_mode = compiler * (isempty(mode) ? "" : "_" * mode)
    @eval $(Symbol("f_", sym, "_", compiler_mode, "!"))(y, x) = @ccall $("./libvectorisation_$(compiler_mode).so").$(Symbol("X", sym))(length(y)::Csize_t, x::Ptr{Cdouble}, y::Ptr{Cdouble})::Cvoid
end

# ╔═╡ f5d55fa8-df20-466b-8479-ff22491eb223
"""
    @vec_bench ex
    @vec_bench ex N

Macro for running some vectorisation benchmarks.  `ex` is the epxression to benchmark, `N`
is the length of the vectors used for the benchmarks, 2000 by default.  Variables that can
be used in this expression are `x` and `y`, `x` being the `N`-element `Float64` input vector
generated sampling uniformly numbers between 0 and 1, and `y` is the `N`-element `Float64`
output vector, with non-initialised memory.

The output is the average time for running the benchmark for each element of the vectors.
This is equivalent to measuring the time to run the operation on the whole vectors and
dividing by the number of vectors.

## Examples

```julia
julia> simple(x) = 2x + 3x ^ 2
simple (generic function with 1 method)

julia> @vec_bench y .= simple.(x)
3.2054191616766466e-10

julia> @vec_bench y .= sqrt.(x) 10_000
2.44742e-8
```
"""
macro vec_bench(ex::Expr, N::Int=2000)
    return quote
        @belapsed($(ex), setup=(x = rand(Float64, $(N)); y = similar(x))) / $(N)
    end
end

# ╔═╡ 683e11a6-3ecf-4fc9-b844-8fafd9e98e32
md"""
## Showdown

Now we can compare Julia with the other compilers.

Note that for these simple elementwise functions we don't even need to write new Julia functions, but we can instead leverage the [vectorised "dot" operator](https://docs.julialang.org/en/v1/manual/mathematical-operations/#man-dot-operators).
The syntax
```julia
y .= sin.(x) .+ exp.(.-(x .^ 2 ./ 2))
```
is more or less equivalent to the loop
```julia
for idx in eachindex(x, y)
    y[idx] = sin(x[idx]) + exp(-(x[idx] ^ 2 / 2))
end
```
As you can see, nested dot calls are fused.
"""

# ╔═╡ 5bba35e2-a782-4d69-a622-3923fa035083
md"### Simple function (addition and multiplication)"

# ╔═╡ 0f15f4f1-168b-4491-90a5-88caf56bc7b4
simple(x) = 2x + 3x ^ 2

# ╔═╡ 88b3f1cd-c9ff-45fd-8811-dd8a27e28d7b
# ╠═╡ disabled = true
#=╠═╡
@benchmark simple(x) setup=(x=rand())
  ╠═╡ =#

# ╔═╡ 019fdab9-3543-43eb-9419-721a95e762bc
# ╠═╡ disabled = true
# ╠═╡ skip_as_script = true
#=╠═╡
@vec_bench y .= simple.(x)
  ╠═╡ =#

# ╔═╡ 0feb62e5-cf1c-4c0c-953b-1be970d32666
# ╠═╡ disabled = true
# ╠═╡ skip_as_script = true
#=╠═╡
@vec_bench f_simple_fujitsu_fast!(y, x)
  ╠═╡ =#

# ╔═╡ af63b9f0-2115-45ec-853e-8fa8168a5e6d
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_simple_fujitsu!(y, x)
  ╠═╡ =#

# ╔═╡ 967f620b-b0a3-4161-b77e-9a05ef26669e
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_simple_llvm_fast!(y, x)
  ╠═╡ =#

# ╔═╡ c349dbec-e51b-4758-a309-aaf9ac33437b
# ╠═╡ disabled = true
# ╠═╡ skip_as_script = true
#=╠═╡
@vec_bench f_simple_llvm!(y, x)
  ╠═╡ =#

# ╔═╡ 5397e432-f52d-4f45-aa91-5cebf8327b74
md"""
Here Julia is in the same ballpark as the other compilers (e.g. Fujitsu, vanilla LLVM).
We can have a look at the LLVM IR generated by Julia and the native code.
Note that the `simple` function has been automatically inlined.
"""

# ╔═╡ d467885b-13ce-45d0-a229-9026e9bb11dd
code_llvm(broadcast, (typeof(simple), Vector{Float64}); debuginfo=:none)

# ╔═╡ 568e8329-02e5-4df2-b41a-4ee41dc340ea
code_native(broadcast, (typeof(simple), Vector{Float64}); debuginfo=:none)

# ╔═╡ fb5f86eb-9c8e-4af0-a5fe-477a2d4d0db2
md"### Inverse"

# ╔═╡ fee8a8b5-1170-4945-ab64-fd831b25eaae
# ╠═╡ disabled = true
# ╠═╡ skip_as_script = true
#=╠═╡
@vec_bench y .= inv.(x)
  ╠═╡ =#

# ╔═╡ f31c2a2c-9f47-40d9-b1a2-2d896d0c12cb
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_recip_fujitsu_fast!(y, x)
  ╠═╡ =#

# ╔═╡ 6c41e1ee-51de-4799-825f-49e6a20db0ac
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_recip_fujitsu!(y, x)
  ╠═╡ =#

# ╔═╡ e5ff577a-0eb7-444f-a145-22705f8665db
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_recip_llvm!(y, x)
  ╠═╡ =#

# ╔═╡ befa994d-29f8-4420-9160-7a32b47a7b6e
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_recip_llvm_fast!(y, x)
  ╠═╡ =#

# ╔═╡ ebe7ea18-9539-4ee7-b71e-f4dcfda09f29
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_recip_gcc!(y, x)
  ╠═╡ =#

# ╔═╡ 257fbeec-8624-4d4a-a4ba-cb079b601d6f
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_recip_gcc_fast!(y, x)
  ╠═╡ =#

# ╔═╡ 9a330c63-334b-440a-9044-4413918ce06d
md"""
Here Julia is much slower than the Fujitsu compiler when using the flags `-Kilfunc` and `-Kfp_relaxed`, but on-par with it when these advanced optimisations are disabled.
From the documentation of the Fujitsu compiler:

> `-Kfp_relaxed` * For single-precision or double-precision floating-point division or SQRT functions, use reciprocal approximation arithmetic instructions and Floating-Point Multiply-Add / Subtract arithmetic instructions.
>
> *: Optimization may affect the calculation result.

With this unsafe flag, in this instance the Fujitsu compiler is able to use approximate instructions which are also easier to vectorise, resulting in a significant performance boost.

Overall, Julia is limited by the code that LLVM can compile to, but it is consistently on-par with it.

We can look again at the LLVM IR generated by Julia and the corresponding assembly code.
Note again the aggressive inlining operated by Julia.
"""

# ╔═╡ 411b472a-2817-44c8-b080-68c33bf68d1b
code_llvm(broadcast, (typeof(inv), Vector{Float64}); debuginfo=:none)

# ╔═╡ d5c1c164-3eb9-4f1f-897b-425cc9ffa55b
code_native(broadcast, (typeof(inv), Vector{Float64}); debuginfo=:none)

# ╔═╡ e22de1d4-e9fe-44e5-a0af-733ecac1a2ee
md"### Other functions"

# ╔═╡ b474069d-f409-4f79-9b0c-e8fc304e13e5
# ╠═╡ disabled = true
# ╠═╡ skip_as_script = true
#=╠═╡
@vec_bench y .= sqrt.(x)
  ╠═╡ =#

# ╔═╡ ca45668e-d58f-4fb0-8fee-99d203a6b7d8
# ╠═╡ disabled = true
#=╠═╡
@vec_bench y .= exp.(x)
  ╠═╡ =#

# ╔═╡ 75d041d2-01bb-4855-9121-d092b3d5d68c
# ╠═╡ disabled = true
#=╠═╡
@vec_bench y .= sin.(x)
  ╠═╡ =#

# ╔═╡ 3f7c22ac-68c3-4ed3-92de-4ee211c51e91
# ╠═╡ disabled = true
#=╠═╡
@vec_bench y .= x .^ 0.55
  ╠═╡ =#

# ╔═╡ b9562ee7-b963-4139-9792-75bde2051320
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_pow_llvm!(y, x)
  ╠═╡ =#

# ╔═╡ ad4df53d-2136-43c4-9082-f20bfbb4c7e7
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_pow_llvm_fast!(y, x)
  ╠═╡ =#

# ╔═╡ 3b9a76fa-65de-48a0-9bc5-b90e7f6fbf72
md"""
### Can we do any better with Julia?

Yes, if we accept to use approximate algorithms, as `-Kfp_relaxed` does. A few third-party packages provide approximate mathematical functions which are more amenable to be vectorised, including [`SLEEFPirates.jl`](https://github.com/JuliaSIMD/SLEEFPirates.jl).

!!! warning
    Use at your own risk!
"""

# ╔═╡ 43ef43d1-f087-4421-84b0-30089ed2d831
# ╠═╡ disabled = true
#=╠═╡
@vec_bench y .= SLEEFPirates.sin_fast.(x)
  ╠═╡ =#

# ╔═╡ 350dd29d-b476-4a21-94ab-5d45420f666b
# ╠═╡ disabled = true
#=╠═╡
@vec_bench f_sin_fujitsu_fast!(y, x)
  ╠═╡ =#

# ╔═╡ 06f2e7b1-dabd-4a62-8b0e-4efa5d86cd14
md"""
Still not as fast as the fast-math version of the Fujitsu compiler, which uses low-level simplified instructions, but close enough and ~10x faster than vanilla `sin` function in Julia. We can see that by using a simpler and approximate algorithm, the new code is easier to vectorise.
"""

# ╔═╡ a7a87dee-b4bd-4e5d-9053-d57fdc3ecc3b
code_llvm(broadcast, (typeof(SLEEFPirates.sin_fast), Vector{Float64}); debuginfo=:none)

# ╔═╡ ba4bfc3e-f2df-4558-b4a1-27af1443139b
md"## Profiling with MCAnalyzer"

# ╔═╡ c6b74fd3-8714-48bb-a76a-e2a40137b174
md"""
MCAnalyzer requires adding some assembly annotations in the body of the function, to instrument the profiler, so we have to define our vectorised functions with the markers included.
"""

# ╔═╡ 441f3101-b07e-425a-ab7a-82b0cce032b1
function f_marked!(f, y, x)
	@simd for idx in eachindex(x, y)
		mark_start()
		@inbounds y[idx] = f(x[idx])
	end
	mark_end()
end

# ╔═╡ a08b62ed-f963-4778-a80d-be4d5409d34c
# ╠═╡ disabled = true
#=╠═╡
analyze(f_marked!, (typeof(simple), Vector{Float64}, Vector{Float64}), :A64FX)
  ╠═╡ =#

# ╔═╡ 0e3f1a19-58e4-444f-91b9-cbe4e8f2176e
# ╠═╡ show_logs = false
# ╠═╡ disabled = true
#=╠═╡
timeline(f_marked!, (typeof(simple), Vector{Float64}, Vector{Float64}), :A64FX)
  ╠═╡ =#

# ╔═╡ e1efa21f-2fa2-4e48-991b-e39a86df4ac2
# ╠═╡ disabled = true
#=╠═╡
analyze(f_marked!, (typeof(sin), Vector{Float64}, Vector{Float64}), :A64FX)
  ╠═╡ =#

# ╔═╡ 357549cb-0171-4765-81da-28d928676a87
# ╠═╡ disabled = true
#=╠═╡
timeline(f_marked!, (typeof(sin), Vector{Float64}, Vector{Float64}), :A64FX)
  ╠═╡ =#

# ╔═╡ dcd55c5a-bef7-4506-afaf-1f37086d0a3b
# ╠═╡ disabled = true
#=╠═╡
analyze(f_marked!, (typeof(SLEEFPirates.sin_fast), Vector{Float64}, Vector{Float64}), :A64FX)
  ╠═╡ =#

# ╔═╡ 71e12ed6-ef18-4f0c-a95a-cdcba8397a2b
# ╠═╡ disabled = true
#=╠═╡
timeline(f_marked!, (typeof(SLEEFPirates.sin_fast), Vector{Float64}, Vector{Float64}), :A64FX)
  ╠═╡ =#

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
BenchmarkTools = "6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf"
MCAnalyzer = "a81df072-f4bb-11e8-03d3-cfaeda626d18"
SLEEFPirates = "476501e8-09a2-5ece-8869-fb82de89a1fa"

[compat]
BenchmarkTools = "~1.3.2"
MCAnalyzer = "~0.3.3"
SLEEFPirates = "~0.6.37"
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.10.0-DEV"
manifest_format = "2.0"
project_hash = "ce6fcab19b9b3ca73070bb8f33cd59f7ca09d95f"

[[deps.Adapt]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "195c5505521008abea5aee4f96930717958eac6f"
uuid = "79e6a3ab-5dfb-504d-930d-738a2a938a0e"
version = "3.4.0"

[[deps.ArgTools]]
uuid = "0dad84c5-d112-42e6-8d28-ef12dabb789f"
version = "1.1.1"

[[deps.ArrayInterface]]
deps = ["ArrayInterfaceCore", "Compat", "IfElse", "LinearAlgebra", "Static"]
git-tree-sha1 = "6d0918cb9c0d3db7fe56bea2bc8638fc4014ac35"
uuid = "4fba245c-0d91-5ea0-9b3e-6abc04ee57a9"
version = "6.0.24"

[[deps.ArrayInterfaceCore]]
deps = ["LinearAlgebra", "SparseArrays", "SuiteSparse"]
git-tree-sha1 = "c46fb7dd1d8ca1d213ba25848a5ec4e47a1a1b08"
uuid = "30b0a656-2188-435a-8636-2ec0e6a096e2"
version = "0.1.26"

[[deps.ArrayInterfaceOffsetArrays]]
deps = ["ArrayInterface", "OffsetArrays", "Static"]
git-tree-sha1 = "3d1a9a01976971063b3930d1aed1d9c4af0817f8"
uuid = "015c0d05-e682-4f19-8f0a-679ce4c54826"
version = "0.1.7"

[[deps.ArrayInterfaceStaticArrays]]
deps = ["Adapt", "ArrayInterface", "ArrayInterfaceCore", "ArrayInterfaceStaticArraysCore", "LinearAlgebra", "Static", "StaticArrays"]
git-tree-sha1 = "f12dc65aef03d0a49650b20b2fdaf184928fd886"
uuid = "b0d46f97-bff5-4637-a19a-dd75974142cd"
version = "0.1.5"

[[deps.ArrayInterfaceStaticArraysCore]]
deps = ["Adapt", "ArrayInterfaceCore", "LinearAlgebra", "StaticArraysCore"]
git-tree-sha1 = "93c8ba53d8d26e124a5a8d4ec914c3a16e6a0970"
uuid = "dd5226c6-a4d4-4bc7-8575-46859f9c95b9"
version = "0.1.3"

[[deps.Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"

[[deps.Base64]]
uuid = "2a0f44e3-6c83-55bd-87e4-b1978d98bd5f"

[[deps.BenchmarkTools]]
deps = ["JSON", "Logging", "Printf", "Profile", "Statistics", "UUIDs"]
git-tree-sha1 = "d9a9701b899b30332bbcb3e1679c41cce81fb0e8"
uuid = "6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf"
version = "1.3.2"

[[deps.BitTwiddlingConvenienceFunctions]]
deps = ["Static"]
git-tree-sha1 = "0c5f81f47bbbcf4aea7b2959135713459170798b"
uuid = "62783981-4cbd-42fc-bca8-16325de8dc4b"
version = "0.1.5"

[[deps.CEnum]]
git-tree-sha1 = "eb4cb44a499229b3b8426dcfb5dd85333951ff90"
uuid = "fa961155-64e5-5f13-b03f-caf6b980ea82"
version = "0.4.2"

[[deps.CPUSummary]]
deps = ["CpuId", "IfElse", "Static"]
git-tree-sha1 = "a7157ab6bcda173f533db4c93fc8a27a48843757"
uuid = "2a0fbf3d-bb9c-48f3-b0a9-814d99fd7ab9"
version = "0.1.30"

[[deps.Compat]]
deps = ["Dates", "LinearAlgebra", "UUIDs"]
git-tree-sha1 = "00a2cccc7f098ff3b66806862d275ca3db9e6e5a"
uuid = "34da2185-b29b-5c13-b0c7-acf172513d20"
version = "4.5.0"

[[deps.CompilerSupportLibraries_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "e66e0078-7015-5450-92f7-15fbd957f2ae"
version = "1.0.1+0"

[[deps.CpuId]]
deps = ["Markdown"]
git-tree-sha1 = "fcbb72b032692610bfbdb15018ac16a36cf2e406"
uuid = "adafc99b-e345-5852-983c-f28acb93d879"
version = "0.3.1"

[[deps.Dates]]
deps = ["Printf"]
uuid = "ade2ca70-3891-5945-98fb-dc099432e06a"

[[deps.Downloads]]
deps = ["ArgTools", "FileWatching", "LibCURL", "NetworkOptions"]
uuid = "f43a241f-c20a-4ad4-852c-f6b1247861c6"
version = "1.6.0"

[[deps.ExprTools]]
git-tree-sha1 = "56559bbef6ca5ea0c0818fa5c90320398a6fbf8d"
uuid = "e2ba6199-217a-4e67-a87a-7c52f15ade04"
version = "0.1.8"

[[deps.FileWatching]]
uuid = "7b1f6079-737a-58dc-b8bc-7a2ca5c1b5ee"

[[deps.GPUCompiler]]
deps = ["ExprTools", "InteractiveUtils", "LLVM", "Libdl", "Logging", "TimerOutputs", "UUIDs"]
git-tree-sha1 = "30488903139ebf4c88f965e7e396f2d652f988ac"
uuid = "61eb1bfa-7361-4325-ad38-22787b887f55"
version = "0.16.7"

[[deps.HostCPUFeatures]]
deps = ["BitTwiddlingConvenienceFunctions", "IfElse", "Libdl", "Static"]
git-tree-sha1 = "f64b890b2efa4de81520d2b0fbdc9aadb65bdf53"
uuid = "3e5b6fbb-0976-4d2c-9146-d79de83f2fb0"
version = "0.1.13"

[[deps.IfElse]]
git-tree-sha1 = "debdd00ffef04665ccbb3e150747a77560e8fad1"
uuid = "615f187c-cbe4-4ef1-ba3b-2fcf58d6d173"
version = "0.1.1"

[[deps.InteractiveUtils]]
deps = ["Markdown"]
uuid = "b77e0a4c-d291-57a0-90e8-8db25a27a240"

[[deps.JLLWrappers]]
deps = ["Preferences"]
git-tree-sha1 = "abc9885a7ca2052a736a600f7fa66209f96506e1"
uuid = "692b3bcd-3c85-4b1f-b108-f13ce0eb3210"
version = "1.4.1"

[[deps.JSON]]
deps = ["Dates", "Mmap", "Parsers", "Unicode"]
git-tree-sha1 = "3c837543ddb02250ef42f4738347454f95079d4e"
uuid = "682c06a0-de6a-54ab-a142-c8b1cf79cde6"
version = "0.21.3"

[[deps.LLVM]]
deps = ["CEnum", "LLVMExtra_jll", "Libdl", "Printf", "Unicode"]
git-tree-sha1 = "088dd02b2797f0233d92583562ab669de8517fd1"
uuid = "929cbde3-209d-540e-8aea-75f648917ca0"
version = "4.14.1"

[[deps.LLVMExtra_jll]]
deps = ["Artifacts", "JLLWrappers", "LazyArtifacts", "Libdl", "Pkg", "TOML"]
git-tree-sha1 = "771bfe376249626d3ca12bcd58ba243d3f961576"
uuid = "dad2f222-ce93-54a1-a47d-0025e8a3acab"
version = "0.0.16+0"

[[deps.LLVM_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg", "TOML", "Zlib_jll", "libLLVM_jll"]
git-tree-sha1 = "b8dbf2938b12378bb856d2372bc7b0737dfe7adb"
uuid = "86de99a1-58d6-5da7-8064-bd56ce2e322c"
version = "14.0.6+0"

[[deps.LayoutPointers]]
deps = ["ArrayInterface", "ArrayInterfaceOffsetArrays", "ArrayInterfaceStaticArrays", "LinearAlgebra", "ManualMemory", "SIMDTypes", "Static"]
git-tree-sha1 = "7e34177793212f6d64d045ee47d2883f09fffacc"
uuid = "10f19ff3-798f-405d-979b-55457f8fc047"
version = "0.1.12"

[[deps.LazyArtifacts]]
deps = ["Artifacts", "Pkg"]
uuid = "4af54fe1-eca0-43a8-85a7-787d91b784e3"

[[deps.LibCURL]]
deps = ["LibCURL_jll", "MozillaCACerts_jll"]
uuid = "b27032c2-a3e7-50c8-80cd-2d36dbcbfd21"
version = "0.6.3"

[[deps.LibCURL_jll]]
deps = ["Artifacts", "LibSSH2_jll", "Libdl", "MbedTLS_jll", "Zlib_jll", "nghttp2_jll"]
uuid = "deac9b47-8bc7-5906-a0fe-35ac56dc84c0"
version = "7.84.0+0"

[[deps.LibGit2]]
deps = ["Base64", "NetworkOptions", "Printf", "SHA"]
uuid = "76f85450-5226-5b5a-8eaa-529ad045b433"

[[deps.LibSSH2_jll]]
deps = ["Artifacts", "Libdl", "MbedTLS_jll"]
uuid = "29816b5a-b9ab-546f-933c-edad1886dfa8"
version = "1.10.2+0"

[[deps.Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"

[[deps.LinearAlgebra]]
deps = ["Libdl", "OpenBLAS_jll", "libblastrampoline_jll"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"

[[deps.Logging]]
uuid = "56ddb016-857b-54e1-b83d-db4d58db5568"

[[deps.MCAnalyzer]]
deps = ["GPUCompiler", "LLVM", "LLVM_jll"]
git-tree-sha1 = "40626d485b11824d0b9635d1049ade1a578769bf"
repo-rev = "05a2d4ff92611f5d604b7942d966d278837a4187"
repo-url = "https://github.com/giordano/MCAnalyzer.jl"
uuid = "a81df072-f4bb-11e8-03d3-cfaeda626d18"
version = "0.3.3"

[[deps.ManualMemory]]
git-tree-sha1 = "bcaef4fc7a0cfe2cba636d84cda54b5e4e4ca3cd"
uuid = "d125e4d3-2237-4719-b19c-fa641b8a4667"
version = "0.1.8"

[[deps.Markdown]]
deps = ["Base64"]
uuid = "d6f4376e-aef5-505a-96c1-9c027394607a"

[[deps.MbedTLS_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "c8ffd9c3-330d-5841-b78e-0817d7145fa1"
version = "2.28.0+0"

[[deps.Mmap]]
uuid = "a63ad114-7e13-5084-954f-fe012c677804"

[[deps.MozillaCACerts_jll]]
uuid = "14a3606d-f60d-562e-9121-12d972cd8159"
version = "2022.10.11"

[[deps.NetworkOptions]]
uuid = "ca575930-c2e3-43a9-ace4-1e988b2c1908"
version = "1.2.0"

[[deps.OffsetArrays]]
deps = ["Adapt"]
git-tree-sha1 = "f71d8950b724e9ff6110fc948dff5a329f901d64"
uuid = "6fe1bfb0-de20-5000-8ca7-80f57d26f881"
version = "1.12.8"

[[deps.OpenBLAS_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Libdl"]
uuid = "4536629a-c528-5b80-bd46-f80d51c5b363"
version = "0.3.21+0"

[[deps.Parsers]]
deps = ["Dates", "SnoopPrecompile"]
git-tree-sha1 = "b64719e8b4504983c7fca6cc9db3ebc8acc2a4d6"
uuid = "69de0a69-1ddd-5017-9359-2bf0b02dc9f0"
version = "2.5.1"

[[deps.Pkg]]
deps = ["Artifacts", "Dates", "Downloads", "FileWatching", "LibGit2", "Libdl", "Logging", "Markdown", "Printf", "REPL", "Random", "SHA", "Serialization", "TOML", "Tar", "UUIDs", "p7zip_jll"]
uuid = "44cfe95a-1eb2-52ea-b672-e2afdf69b78f"
version = "1.8.0"

[[deps.Preferences]]
deps = ["TOML"]
git-tree-sha1 = "47e5f437cc0e7ef2ce8406ce1e7e24d44915f88d"
uuid = "21216c6a-2e73-6563-6e65-726566657250"
version = "1.3.0"

[[deps.Printf]]
deps = ["Unicode"]
uuid = "de0858da-6303-5e67-8744-51eddeeeb8d7"

[[deps.Profile]]
deps = ["Printf"]
uuid = "9abbd945-dff8-562f-b5e8-e1ebf5ef1b79"

[[deps.REPL]]
deps = ["InteractiveUtils", "Markdown", "Sockets", "Unicode"]
uuid = "3fa0cd96-eef1-5676-8a61-b3b8758bbffb"

[[deps.Random]]
deps = ["SHA", "Serialization"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"

[[deps.SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"
version = "0.7.0"

[[deps.SIMDTypes]]
git-tree-sha1 = "330289636fb8107c5f32088d2741e9fd7a061a5c"
uuid = "94e857df-77ce-4151-89e5-788b33177be4"
version = "0.1.0"

[[deps.SLEEFPirates]]
deps = ["IfElse", "Static", "VectorizationBase"]
git-tree-sha1 = "c8679919df2d3c71f74451321f1efea6433536cc"
uuid = "476501e8-09a2-5ece-8869-fb82de89a1fa"
version = "0.6.37"

[[deps.Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"

[[deps.SnoopPrecompile]]
git-tree-sha1 = "f604441450a3c0569830946e5b33b78c928e1a85"
uuid = "66db9d55-30c0-4569-8b51-7e840670fc0c"
version = "1.0.1"

[[deps.Sockets]]
uuid = "6462fe0b-24de-5631-8697-dd941f90decc"

[[deps.SparseArrays]]
deps = ["Libdl", "LinearAlgebra", "Random", "Serialization", "SuiteSparse_jll"]
uuid = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"

[[deps.Static]]
deps = ["IfElse"]
git-tree-sha1 = "c35b107b61e7f34fa3f124026f2a9be97dea9e1c"
uuid = "aedffcd0-7271-4cad-89d0-dc628f76c6d3"
version = "0.8.3"

[[deps.StaticArrays]]
deps = ["LinearAlgebra", "Random", "StaticArraysCore", "Statistics"]
git-tree-sha1 = "ffc098086f35909741f71ce21d03dadf0d2bfa76"
uuid = "90137ffa-7385-5640-81b9-e52037218182"
version = "1.5.11"

[[deps.StaticArraysCore]]
git-tree-sha1 = "6b7ba252635a5eff6a0b0664a41ee140a1c9e72a"
uuid = "1e83bf80-4336-4d27-bf5d-d5a4f845583c"
version = "1.4.0"

[[deps.Statistics]]
deps = ["LinearAlgebra", "SparseArrays"]
uuid = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"
version = "1.9.0"

[[deps.SuiteSparse]]
deps = ["Libdl", "LinearAlgebra", "Serialization", "SparseArrays"]
uuid = "4607b0f0-06f3-5cda-b6b1-a6196a1729e9"

[[deps.SuiteSparse_jll]]
deps = ["Artifacts", "Libdl", "Pkg", "libblastrampoline_jll"]
uuid = "bea87d4a-7f5b-5778-9afe-8cc45184846c"
version = "5.10.1+0"

[[deps.TOML]]
deps = ["Dates"]
uuid = "fa267f1f-6049-4f14-aa54-33bafae1ed76"
version = "1.0.3"

[[deps.Tar]]
deps = ["ArgTools", "SHA"]
uuid = "a4e569a6-e804-4fa4-b0f3-eef7a1d5b13e"
version = "1.10.0"

[[deps.TimerOutputs]]
deps = ["ExprTools", "Printf"]
git-tree-sha1 = "f2fd3f288dfc6f507b0c3a2eb3bac009251e548b"
uuid = "a759f4b9-e2f1-59dc-863e-4aeb61b1ea8f"
version = "0.5.22"

[[deps.UUIDs]]
deps = ["Random", "SHA"]
uuid = "cf7118a7-6976-5b1a-9a39-7adc72f591a4"

[[deps.Unicode]]
uuid = "4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"

[[deps.VectorizationBase]]
deps = ["ArrayInterface", "CPUSummary", "HostCPUFeatures", "IfElse", "LayoutPointers", "Libdl", "LinearAlgebra", "SIMDTypes", "Static"]
git-tree-sha1 = "fc79d0f926592ecaeaee164f6a4ca81b51115c3b"
uuid = "3d5dd08c-fd9d-11e8-17fa-ed2836048c2f"
version = "0.21.56"

[[deps.Zlib_jll]]
deps = ["Libdl"]
uuid = "83775a58-1f1d-513f-b197-d71354ab007a"
version = "1.2.13+0"

[[deps.libLLVM_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8f36deef-c2a5-5394-99ed-8e07531fb29a"
version = "14.0.6+0"

[[deps.libblastrampoline_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850b90-86db-534c-a0d3-1478176c7d93"
version = "5.2.0+0"

[[deps.nghttp2_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850ede-7688-5339-a07c-302acd2aaf8d"
version = "1.48.0+0"

[[deps.p7zip_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "3f19e933-33d8-53b3-aaab-bd5110c3b7a0"
version = "17.4.0+0"
"""

# ╔═╡ Cell order:
# ╟─4025d9a0-3d9a-4135-977f-67d16e660f65
# ╟─3fbd2107-7359-47cf-ada0-2fd59691300e
# ╟─33aea1f7-f12d-4d78-bdfa-17ef2e11bd82
# ╠═0285a330-7374-11ed-3454-7188768772bc
# ╟─936f317c-e7a5-46b0-96f0-e5f687cde0ab
# ╠═9fa359b2-2b31-431b-93e3-77f84b4a9098
# ╟─f5d55fa8-df20-466b-8479-ff22491eb223
# ╟─683e11a6-3ecf-4fc9-b844-8fafd9e98e32
# ╟─5bba35e2-a782-4d69-a622-3923fa035083
# ╠═0f15f4f1-168b-4491-90a5-88caf56bc7b4
# ╠═88b3f1cd-c9ff-45fd-8811-dd8a27e28d7b
# ╠═019fdab9-3543-43eb-9419-721a95e762bc
# ╠═0feb62e5-cf1c-4c0c-953b-1be970d32666
# ╠═af63b9f0-2115-45ec-853e-8fa8168a5e6d
# ╠═967f620b-b0a3-4161-b77e-9a05ef26669e
# ╠═c349dbec-e51b-4758-a309-aaf9ac33437b
# ╟─5397e432-f52d-4f45-aa91-5cebf8327b74
# ╠═d467885b-13ce-45d0-a229-9026e9bb11dd
# ╠═568e8329-02e5-4df2-b41a-4ee41dc340ea
# ╟─fb5f86eb-9c8e-4af0-a5fe-477a2d4d0db2
# ╠═fee8a8b5-1170-4945-ab64-fd831b25eaae
# ╠═f31c2a2c-9f47-40d9-b1a2-2d896d0c12cb
# ╠═6c41e1ee-51de-4799-825f-49e6a20db0ac
# ╠═e5ff577a-0eb7-444f-a145-22705f8665db
# ╠═befa994d-29f8-4420-9160-7a32b47a7b6e
# ╠═ebe7ea18-9539-4ee7-b71e-f4dcfda09f29
# ╠═257fbeec-8624-4d4a-a4ba-cb079b601d6f
# ╟─9a330c63-334b-440a-9044-4413918ce06d
# ╠═411b472a-2817-44c8-b080-68c33bf68d1b
# ╠═d5c1c164-3eb9-4f1f-897b-425cc9ffa55b
# ╟─e22de1d4-e9fe-44e5-a0af-733ecac1a2ee
# ╠═b474069d-f409-4f79-9b0c-e8fc304e13e5
# ╠═ca45668e-d58f-4fb0-8fee-99d203a6b7d8
# ╠═75d041d2-01bb-4855-9121-d092b3d5d68c
# ╠═3f7c22ac-68c3-4ed3-92de-4ee211c51e91
# ╠═b9562ee7-b963-4139-9792-75bde2051320
# ╠═ad4df53d-2136-43c4-9082-f20bfbb4c7e7
# ╟─3b9a76fa-65de-48a0-9bc5-b90e7f6fbf72
# ╠═0d69fbf7-45f1-4358-9ba2-8be44e37e25e
# ╠═43ef43d1-f087-4421-84b0-30089ed2d831
# ╠═350dd29d-b476-4a21-94ab-5d45420f666b
# ╟─06f2e7b1-dabd-4a62-8b0e-4efa5d86cd14
# ╠═a7a87dee-b4bd-4e5d-9053-d57fdc3ecc3b
# ╟─ba4bfc3e-f2df-4558-b4a1-27af1443139b
# ╠═c8308e19-bbcd-4b7b-8e07-47af06fc07c8
# ╟─c6b74fd3-8714-48bb-a76a-e2a40137b174
# ╠═441f3101-b07e-425a-ab7a-82b0cce032b1
# ╠═a08b62ed-f963-4778-a80d-be4d5409d34c
# ╠═0e3f1a19-58e4-444f-91b9-cbe4e8f2176e
# ╠═e1efa21f-2fa2-4e48-991b-e39a86df4ac2
# ╠═357549cb-0171-4765-81da-28d928676a87
# ╠═dcd55c5a-bef7-4506-afaf-1f37086d0a3b
# ╠═71e12ed6-ef18-4f0c-a95a-cdcba8397a2b
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
